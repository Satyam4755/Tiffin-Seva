<!-- Delivering to button -->
<button id="deliveryBtn" class="btn delivery-btn">
  Delivering to:
  <span class="location-text">
    <%= user && user.location ? user.location : 'Set location' %>
  </span>
</button>

<!-- Hidden modal -->
<div id="addressModal" class="modal hidden" role="dialog" aria-modal="true" aria-labelledby="addressModalTitle">
  <div class="modal-content">
    <h3 id="addressModalTitle">Change Delivery Location</h3>

    <!-- form -->
    <form action="/" method="POST" id="addressForm" autocomplete="off">
      <div class="input-group">
        <input
          id="addressInput"
          name="location"
          type="text"
          placeholder="Enter location"
          class="input"
          value="<%= user?.location || '' %>"
          required
        />
        <input type="hidden" id="lat" name="lat" value="<%= user?.lat || '' %>" />
        <input type="hidden" id="lng" name="lng" value="<%= user?.lng || '' %>" />
      </div>

    <div class="buttons-row">
        <button type="submit" class="btn btn-primary">Submit</button>
        <button type="button" id="closeModalBtn" class="btn btn-secondary">Cancel</button>
        <button type="button" id="useCurrentBtn" class="btn btn-secondary">Use my current location</button>
    </div>
<script>
  const useCurrentBtn = document.getElementById('useCurrentBtn');

  useCurrentBtn.addEventListener('click', () => {
    if (navigator.geolocation) {
      useCurrentBtn.disabled = true;
      useCurrentBtn.textContent = 'Detectingâ€¦';

      navigator.geolocation.getCurrentPosition(
        async (pos) => {
          const lat = pos.coords.latitude;
          const lng = pos.coords.longitude;

          latInput.value = lat;
          lngInput.value = lng;

          // optional: reverse-geocode lat/lng to a human-readable address using Maps Geocoder
          const geocoder = new google.maps.Geocoder();
          geocoder.geocode({ location: { lat, lng } }, (results, status) => {
            if (status === 'OK' && results[0]) {
              addressInput.value = results[0].formatted_address;
              selectedPlace = {
                geometry: { location: { lat: () => lat, lng: () => lng } },
              }; // mark as selected
            } else {
              addressInput.value = '';
            }
            useCurrentBtn.disabled = false;
            useCurrentBtn.textContent = 'Use my current location';
          });
        },
        (err) => {
          alert('Could not get your location: ' + err.message);
          useCurrentBtn.disabled = false;
          useCurrentBtn.textContent = 'Use my current location';
        }
      );
    } else {
      alert('Geolocation is not supported by your browser.');
    }
  });
</script>
    </form>
    <!-- /form -->
  </div>
</div>

<!-- overlay -->
<div id="overlay" class="hidden overlay"></div>

<style>
/* Delivering to button */
.delivery-btn {
  display: block;              /* limit width */
  width: 100%;                    /* responsive width */
  /* margin: 16px auto;             center horizontally */
  text-align: center;            /* center text inside */
  box-sizing: border-box;
}

/* handle long text inside */
.location-text {
  display: inline-block;
  max-width: 60%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  vertical-align: middle;
}

/* General button styling */
.btn {
  background: linear-gradient(90deg,#ffb347,#ffcc33);
  color: #222;
  border: none;
  padding: 10px 24px;
  cursor: pointer;
  font-size: 1.25rem;
  font-weight: 500;
  transition: transform 0.15s ease, box-shadow 0.15s ease;
}
.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 10px rgba(0,0,0,0.15);
}
.btn-primary {
  background: linear-gradient(90deg,#4caf50,#81c784);
  color: #fff;
}
.btn-secondary {
  background: #f5f5f5;
  color: #333;
}

/* Modal */
.modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%) scale(1);
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 12px 28px rgba(0,0,0,0.2);
  z-index: 1001;
  min-width: 320px;
  max-width: 90vw;
  width: 400px;
  padding: 0;
  transition: opacity .25s ease, transform .25s ease;
}
.modal.hidden {
  opacity: 0;
  pointer-events: none;
  transform: translate(-50%,-50%) scale(.98);
}
.modal-content {
  padding: 28px 24px;
  display: flex;
  flex-direction: column;
  align-items: stretch; /* take full width */
}
.modal-content h3 {
  margin: 0 0 20px;
  font-size: 1.25rem;
  font-weight: 600;
  color: #333;
  text-align: center;
}

/* Input group */
.input-group {
  width: 100%;
}
.input {
  width: 90%;
  padding: 12px 14px;
  border: 1.5px solid #ffcc33;
  border-radius: 8px;
  font-size: 1rem;
  outline: none;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
.input:focus {
  border-color: #ffb347;
  box-shadow: 0 0 0 3px rgba(255,204,51,0.25);
}

/* Buttons inside modal form */
.modal-content form {
  width: 100%;
}
.modal-content form .buttons-row {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;  /* center horizontally */
  gap: 10px;                /* equal spacing between buttons */
  margin-top: 12px;
}
.modal-content form .buttons-row .btn {
  flex: 1 1 auto;           /* let buttons grow equally */
  min-width: 120px;         /* prevent too small buttons */
}

/* Overlay */
.overlay {
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(0,0,0,.25);
  z-index: 1000;
  transition: opacity .25s ease;
}
.overlay.hidden {
  opacity: 0;
  pointer-events: none;
}

/* Places dropdown above modal */
.pac-container {
  z-index: 3000 !important;
}
</style>

<!-- GOOGLE MAPS: only include ONCE in the page. callback initAutocomplete will run when API loads -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB1TiKO0af2jD8gTGypRjaoOedqOUrbVD8&libraries=places&callback=initAutocomplete" async defer></script>

<script>
  // Elements
  const deliveryBtn = document.getElementById('deliveryBtn');
  const addressModal = document.getElementById('addressModal');
  const overlay = document.getElementById('overlay');
  const closeModalBtn = document.getElementById('closeModalBtn');
  const addressInput = document.getElementById('addressInput');
  const addressForm = document.getElementById('addressForm');
  const latInput = document.getElementById('lat');
  const lngInput = document.getElementById('lng');
  const getMyLocationBtn = document.getElementById('getMyLocationBtn'); // optional button

  let autocomplete = null;
  let selectedPlace = null;

  // Called by the Google Maps script (callback=initAutocomplete)
  function initAutocomplete() {
    autocomplete = new google.maps.places.Autocomplete(addressInput);
    autocomplete.setFields(['formatted_address','geometry','name','address_components']);

    autocomplete.addListener('place_changed', () => {
      selectedPlace = autocomplete.getPlace();

      if (selectedPlace && selectedPlace.geometry) {
        let displayValue = '';

        if (selectedPlace.name && selectedPlace.formatted_address) {
          displayValue = selectedPlace.name + ', ' + selectedPlace.formatted_address;
        } else if (selectedPlace.formatted_address) {
          displayValue = selectedPlace.formatted_address;
        } else {
          displayValue = selectedPlace.name || addressInput.value;
        }

        addressInput.value = displayValue;
        latInput.value = selectedPlace.geometry.location.lat();
        lngInput.value = selectedPlace.geometry.location.lng();
      }
    });

    addressInput.addEventListener('input', () => {
      selectedPlace = null;
      latInput.value = '';
      lngInput.value = '';
    });
  }

  // Open modal
  deliveryBtn.addEventListener('click', () => {
    addressModal.classList.remove('hidden');
    overlay.classList.remove('hidden');
    setTimeout(() => addressInput.focus(), 60);
  });

  // Close modal
  closeModalBtn.addEventListener('click', () => {
    addressModal.classList.add('hidden');
    overlay.classList.add('hidden');
  });

  // Ask for current location when button clicked
  if (getMyLocationBtn) {
    getMyLocationBtn.addEventListener('click', () => {
      if (navigator.geolocation) {
        // Check permission status
        if (navigator.permissions) {
          navigator.permissions.query({name:'geolocation'}).then(function(result) {
            if (result.state === 'granted') {
              // Already granted
              navigator.geolocation.getCurrentPosition(fillPosition, showLocationError);
            } else if (result.state === 'prompt') {
              // Browser will show prompt
              navigator.geolocation.getCurrentPosition(fillPosition, showLocationError);
            } else if (result.state === 'denied') {
              alert("Location permission denied. Please enable it in your browser settings to use 'Get My Location'. You can also enter your address manually.");
            }
          });
        } else {
          // Fallback if Permissions API not supported
          navigator.geolocation.getCurrentPosition(fillPosition, showLocationError);
        }
      } else {
        alert('Geolocation is not supported by this browser.');
      }
    });
  }

  function fillPosition(pos) {
    const lat = pos.coords.latitude;
    const lng = pos.coords.longitude;

    // fill hidden fields
    latInput.value = lat;
    lngInput.value = lng;

    // display coordinates in the input
    addressInput.value = `Lat: ${lat}, Lng: ${lng}`;
    selectedPlace = { geometry: { location: { lat: () => lat, lng: () => lng } } };
  }

  function showLocationError(err) {
    if (err.code === 1) {
      alert("Location permission denied. Please enable it in your browser settings.");
    } else if (err.code === 2) {
      alert("Location unavailable. Please try again.");
    } else if (err.code === 3) {
      alert("Location request timed out. Please try again.");
    } else {
      alert("Unable to get location: " + err.message);
    }
  }

  // Validate form before submit
  addressForm.addEventListener('submit', (e) => {
    if ((!selectedPlace || !selectedPlace.geometry) && !latInput.value) {
      e.preventDefault();
      alert('Please pick a location from suggestions or use "Get My Location".');
      addressInput.focus();
    }
  });
</script>
